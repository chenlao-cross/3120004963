建议参考：

1、PSP表：

| PSP2.1 | Personal Software Process Stages |  预估耗时（分钟） |实际耗时（分钟）|
  | ------ | ------ |  ------ | ------ |
| Planning | 计划 | 50 |60 |
| · Estimate | · 估计这个任务需要多少时间 | 60 | 60 |
| Development |开发|400| 450 |
|  Analysis |  需求分析 (包括学习新技术) | 80| 70 |
| · Design Spec |  生成设计文档 | 25 | 25 |
| · Design Review | · 设计复审 | 30 | 15 |
|· Coding Standard  | 代码规范 (为目前的开发制定合适的规范)  |  15 |   30 |
| Design |	· 具体设计   |  45 | 35   |
| · Coding | 具体编码  |80  |  80  |
| Code Review  |  · 代码复审 |  35 |  25  |
|Test  |    测试（自我测试，修改代码，提交修改）| 20  |   15 |
|  Reporting|  	报告 |  30 |30    |
| · Test Report·  | · 测试报告  | 35  | 30   |
| · Size Measurement·  | 计算工作量  | 20  |   20 |
| ·  Postmortem & Process Improvement Plan |	· 事后总结, 并提出过程改进计划   | 30  |   25 |
| ·  | 合计  | 920  |950    |

2、效能分析（性能分析截图）

3、设计实现过程
函数调用（截图）

4、代码说明

       Main模块：
Main汗水部分代码：（代码块）
public static void createMenu(){
        Scanner sc= new Scanner(System.in);
        System.out.println("请输入产生几以内的数字：");
        range=sc.nextInt();
        System.out.println("请输入产生多少个运算表达式：");
        num=sc.nextInt();
        expression=new String[num];
        result=new String[num];
    }
}


      Expression模块:

生成题目：（代码块）
public static String[] expressionCreat(int range) {
        String arr[] = new String[2];
        int nOfNum1 = (int) (random.nextInt(range));//numeratorOfNum1-第一个数的分子
        int dOfNum1 = (int) (random.nextInt(range));//denominatorOfNum1-第一个数的分母
        int nOfNum2 = (int) (random.nextInt(range));//numeratorOfNum2
        int dOfNum2 = (int) (random.nextInt(range));//denominatorOfNum2
        int symbol = (int) (random.nextInt(4));

        //分母均不为0
        if (dOfNum1 != 0 && dOfNum2 != 0) {
            if (symbol == 0) {
                numerator = nOfNum1 * dOfNum2 + dOfNum1 * nOfNum2;
                denominator = dOfNum1 * dOfNum2;
                arr[0] = improperFractionToTrue(nOfNum1, dOfNum1) + "\t+\t" + improperFractionToTrue(nOfNum2, dOfNum2) + "\t= ";
                System.out.println(arr[0]);
                arr[1] = reductionofFraction(numerator, denominator);
                return arr;
            }
            if (symbol == 1 && nOfNum1 * dOfNum2 - dOfNum1 * nOfNum2 >= 0) {
                numerator = nOfNum1 * dOfNum2 - dOfNum1 * nOfNum2;
                denominator = dOfNum1 * dOfNum2;
                arr[0] = improperFractionToTrue(nOfNum1, dOfNum1) + "\t-\t" + improperFractionToTrue(nOfNum2, dOfNum2) + "\t= ";
                System.out.println(arr[0]);
                arr[1] = reductionofFraction(numerator, denominator);
                return arr;
            }
            if (symbol == 1 && nOfNum1 * dOfNum2 - dOfNum1 * nOfNum2 < 0) {
                numerator = dOfNum1 * nOfNum2 - nOfNum1 * dOfNum2;
                denominator = dOfNum1 * dOfNum2;
                arr[0] = improperFractionToTrue(nOfNum2, dOfNum2) + "\t-\t" + improperFractionToTrue(nOfNum1, dOfNum1) + "\t= ";
                System.out.println(arr[0]);
                arr[1] = reductionofFraction(numerator, denominator);
                return arr;
            }
            if (symbol == 2) {
                numerator = nOfNum1 * nOfNum2;
                denominator = dOfNum1 * dOfNum2;
                arr[0] = improperFractionToTrue(nOfNum1, dOfNum1) + "\t×\t"+ improperFractionToTrue(nOfNum2, dOfNum2) + "\t= ";
                System.out.println(arr[0]);
                arr[1] = reductionofFraction(numerator, denominator);
                return arr;
            }
            if (symbol == 3 && nOfNum2 != 0) {
                numerator = nOfNum1 * dOfNum2;
                denominator = dOfNum1 * nOfNum2;
                arr[0] = improperFractionToTrue(nOfNum1, dOfNum1) + "\t÷\t"+ improperFractionToTrue(nOfNum2, dOfNum2) + "\t= ";
                System.out.println(arr[0]);
                arr[1] = reductionofFraction(numerator, denominator);
                return arr;
            }
            if (symbol == 3 && nOfNum2 == 0) {
                arr[0] = "false";
                return arr;
            }
        }

        //分母有0,忽略分母计算
        else {
            dOfNum1 = 1;
            dOfNum2 = 1;
            if (symbol == 0) {
                arr[0] = nOfNum1 + "\t+\t" + nOfNum2 + "\t= ";
                System.out.println(arr[0]);
                arr[1] = String.valueOf(nOfNum1+nOfNum2);
                return arr;
            }
            if (symbol == 1 && nOfNum1-nOfNum2 >= 0) {
                arr[0] = nOfNum1 + "\t-\t" + nOfNum2 + "\t= ";
                System.out.println(arr[0]);
                arr[1] = String.valueOf(nOfNum1-nOfNum2);
                return arr;
            }
            if (symbol == 1 && nOfNum1-nOfNum2 < 0) {
                arr[0] = nOfNum2 + "\t-\t" + nOfNum1 + "\t= ";
                System.out.println(arr[0]);
                arr[1] = String.valueOf(nOfNum2-nOfNum1);
                return arr;
            }
            if (symbol == 2) {
                arr[0] = nOfNum2 + "\t×\t" + nOfNum1 + "\t= ";
                System.out.println(arr[0]);
                arr[1] = String.valueOf(nOfNum1*nOfNum2);
                return arr;
            }
            if (symbol == 3 && nOfNum2 != 0) {
                arr[0] = nOfNum1 + "\t÷\t" + nOfNum2 + "\t=";
                System.out.println(arr[0]);
                arr[1] = reductionofFraction(nOfNum1,nOfNum2);
                return arr;
            }
            if (symbol == 3 && nOfNum2 == 0) {
                arr[0] = "false";
                return arr;
            }
        }
        arr[0]="false";
        return arr;
    }

对分数处理：（代码块）
 public static String reductionofFraction(int a, int b) {// 分数约分，用于计算结果
        int y = 1;
        for (int i = a; i >= 1; i--) {
            if (a % i == 0 && b % i == 0) {
                y = i;
                break;
            }
        }
        int z = a / y;// 分子
        int m = b / y;// 分母
        if (z == 0) {
            return "0";
        }
        if(m==1) return z+"";
        else  return improperFractionToTrue(z,m);

    }


     假分数化简：（代码块）
    public static String improperFractionToTrue(int a, int b) {
        if(a>=b) return a%b==0?String.valueOf(a/b):a/b+"'"+a%b+"/"+b;
        return a+"/"+b;
    }
}


        TxtInOut模块：

生成题目文件及答案文件：（代码块）
  FileWriter fg = null;
        try {
            //反馈正确与错误题目的信息
            File f=new File("Grade.txt");
            fg = new FileWriter(f, false);
        } catch (IOException e) {
            e.printStackTrace();
        }
        PrintWriter pg = new PrintWriter(fg);
        pg.println(" ");
        pg.print("Correct:"+rightCount+"(");
        for (int j = 0; j <= num; j++) {
            if (rightNum[j] != 0) {
                pg.print(rightNum[j] + ",");
            }
        }
        pg.println(")");
        pg.print("Wrong:"+wrongCount+"(");
        for (int j = 0; j <= num; j++) {
            if (wrongNum[j] != 0) {
                pg.print(wrongNum[j] + ",");
            }
        }
        pg.print(")");
        pg.flush();
        try {
            fg.flush();
            pg.close();
            fg.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }




5、测试运行（截图）



6、项目小结：（分开）

陈烙：第一次尝试组队合作，收获颇多，这次项目我们进行了线下和线上的讨论，研究项目的细节与大致的框架，确定好方向，认真研究分析项目需求，让我了解到软件工程这门课程的意义；
在开发的过程中，我们积极交流，认真聆听对方的意见，取得较好效果。

李卓航：


